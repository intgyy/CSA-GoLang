// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GoodsList, error)
	FavoriteGoods(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetFavoriteGoods(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*GoodsList, error)
	ClearGoodsInCar(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	BuyAllGoodsInCar(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	AddGoodsInCar(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*CartInfo, error)
	ReduceGoodsInCar(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*CartInfo, error)
	BuyGoods(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	PublishGoods(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*GoodsInfo, error)
	DeleteGoods(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*GoodsInfo, error)
	CheckPassword(ctx context.Context, in *PasswordCheckInfo, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetUserByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*UserInfo, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/proto.User/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GoodsList, error) {
	out := new(GoodsList)
	err := c.cc.Invoke(ctx, "/proto.User/GetGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FavoriteGoods(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.User/FavoriteGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFavoriteGoods(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*GoodsList, error) {
	out := new(GoodsList)
	err := c.cc.Invoke(ctx, "/proto.User/GetFavoriteGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ClearGoodsInCar(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.User/ClearGoodsInCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BuyAllGoodsInCar(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.User/BuyAllGoodsInCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddGoodsInCar(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*CartInfo, error) {
	out := new(CartInfo)
	err := c.cc.Invoke(ctx, "/proto.User/AddGoodsInCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ReduceGoodsInCar(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*CartInfo, error) {
	out := new(CartInfo)
	err := c.cc.Invoke(ctx, "/proto.User/ReduceGoodsInCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BuyGoods(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.User/BuyGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PublishGoods(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*GoodsInfo, error) {
	out := new(GoodsInfo)
	err := c.cc.Invoke(ctx, "/proto.User/PublishGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteGoods(ctx context.Context, in *GoodsUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.User/DeleteGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*GoodsInfo, error) {
	out := new(GoodsInfo)
	err := c.cc.Invoke(ctx, "/proto.User/UpdateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckPassword(ctx context.Context, in *PasswordCheckInfo, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.User/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/proto.User/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*UserInfo, error)
	GetGoods(context.Context, *GetGoodsRequest) (*GoodsList, error)
	FavoriteGoods(context.Context, *GoodsUserRequest) (*SuccessResponse, error)
	GetFavoriteGoods(context.Context, *NameRequest) (*GoodsList, error)
	ClearGoodsInCar(context.Context, *NameRequest) (*SuccessResponse, error)
	BuyAllGoodsInCar(context.Context, *NameRequest) (*SuccessResponse, error)
	AddGoodsInCar(context.Context, *GoodsUserRequest) (*CartInfo, error)
	ReduceGoodsInCar(context.Context, *GoodsUserRequest) (*CartInfo, error)
	BuyGoods(context.Context, *GoodsUserRequest) (*SuccessResponse, error)
	PublishGoods(context.Context, *CreateGoodsRequest) (*GoodsInfo, error)
	DeleteGoods(context.Context, *GoodsUserRequest) (*SuccessResponse, error)
	UpdateGoods(context.Context, *UpdateGoodsRequest) (*GoodsInfo, error)
	CheckPassword(context.Context, *PasswordCheckInfo) (*SuccessResponse, error)
	GetUserByName(context.Context, *NameRequest) (*UserInfo, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) GetGoods(context.Context, *GetGoodsRequest) (*GoodsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoods not implemented")
}
func (UnimplementedUserServer) FavoriteGoods(context.Context, *GoodsUserRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteGoods not implemented")
}
func (UnimplementedUserServer) GetFavoriteGoods(context.Context, *NameRequest) (*GoodsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteGoods not implemented")
}
func (UnimplementedUserServer) ClearGoodsInCar(context.Context, *NameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearGoodsInCar not implemented")
}
func (UnimplementedUserServer) BuyAllGoodsInCar(context.Context, *NameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyAllGoodsInCar not implemented")
}
func (UnimplementedUserServer) AddGoodsInCar(context.Context, *GoodsUserRequest) (*CartInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoodsInCar not implemented")
}
func (UnimplementedUserServer) ReduceGoodsInCar(context.Context, *GoodsUserRequest) (*CartInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceGoodsInCar not implemented")
}
func (UnimplementedUserServer) BuyGoods(context.Context, *GoodsUserRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyGoods not implemented")
}
func (UnimplementedUserServer) PublishGoods(context.Context, *CreateGoodsRequest) (*GoodsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishGoods not implemented")
}
func (UnimplementedUserServer) DeleteGoods(context.Context, *GoodsUserRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoods not implemented")
}
func (UnimplementedUserServer) UpdateGoods(context.Context, *UpdateGoodsRequest) (*GoodsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoods not implemented")
}
func (UnimplementedUserServer) CheckPassword(context.Context, *PasswordCheckInfo) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedUserServer) GetUserByName(context.Context, *NameRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/GetGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetGoods(ctx, req.(*GetGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FavoriteGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FavoriteGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/FavoriteGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FavoriteGoods(ctx, req.(*GoodsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFavoriteGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFavoriteGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/GetFavoriteGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFavoriteGoods(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ClearGoodsInCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ClearGoodsInCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/ClearGoodsInCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ClearGoodsInCar(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BuyAllGoodsInCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BuyAllGoodsInCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/BuyAllGoodsInCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BuyAllGoodsInCar(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddGoodsInCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddGoodsInCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/AddGoodsInCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddGoodsInCar(ctx, req.(*GoodsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ReduceGoodsInCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ReduceGoodsInCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/ReduceGoodsInCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ReduceGoodsInCar(ctx, req.(*GoodsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BuyGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BuyGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/BuyGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BuyGoods(ctx, req.(*GoodsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PublishGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PublishGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/PublishGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PublishGoods(ctx, req.(*CreateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/DeleteGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteGoods(ctx, req.(*GoodsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/UpdateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateGoods(ctx, req.(*UpdateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordCheckInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckPassword(ctx, req.(*PasswordCheckInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "GetGoods",
			Handler:    _User_GetGoods_Handler,
		},
		{
			MethodName: "FavoriteGoods",
			Handler:    _User_FavoriteGoods_Handler,
		},
		{
			MethodName: "GetFavoriteGoods",
			Handler:    _User_GetFavoriteGoods_Handler,
		},
		{
			MethodName: "ClearGoodsInCar",
			Handler:    _User_ClearGoodsInCar_Handler,
		},
		{
			MethodName: "BuyAllGoodsInCar",
			Handler:    _User_BuyAllGoodsInCar_Handler,
		},
		{
			MethodName: "AddGoodsInCar",
			Handler:    _User_AddGoodsInCar_Handler,
		},
		{
			MethodName: "ReduceGoodsInCar",
			Handler:    _User_ReduceGoodsInCar_Handler,
		},
		{
			MethodName: "BuyGoods",
			Handler:    _User_BuyGoods_Handler,
		},
		{
			MethodName: "PublishGoods",
			Handler:    _User_PublishGoods_Handler,
		},
		{
			MethodName: "DeleteGoods",
			Handler:    _User_DeleteGoods_Handler,
		},
		{
			MethodName: "UpdateGoods",
			Handler:    _User_UpdateGoods_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _User_CheckPassword_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:    _User_GetUserByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
